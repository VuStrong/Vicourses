version: '2'
services:
  ###
  api-gateway:
    image: vustrong/vicourses-apigateway
    networks:
      - vicourses-network
    ports:
      - 8000:8080

  ###
  rabbitmq:
    image: rabbitmq:3.13.1-management-alpine
    ports:
      - 5672:5672
      - 15672:15672
    restart: always
    env_file:
      - rabbitmq/.env
    networks:
      - vicourses-network
    volumes:
        - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
        - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
    healthcheck:
      test: "exit 0"
      timeout: 10s

  ###
  mysql:
    image: mysql:8.4.0
    command: ["mysqld", "--mysql-native-password=ON"]
    restart: always
    env_file:
      - db/mysql/.env
    ports:
      - "13306:3306"
    volumes:
      - mysqldb_data:/var/lib/mysql
      - ./db/mysql/scripts:/docker-entrypoint-initdb.d
    networks:
      - vicourses-network
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
      timeout: 10s
      retries: 10

  ###
  elasticsearch-setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
    volumes:
      - elasticsearch_certs:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: elasticsearch01\n"\
          "    dns:\n"\
          "      - elasticsearch01\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://elasticsearch01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://elasticsearch01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/elasticsearch01/elasticsearch01.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120

  ###
  elasticsearch01:
    depends_on:
      elasticsearch-setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
    volumes:
      - elasticsearch_certs:/usr/share/elasticsearch/config/certs
      - elasticsearch_data01:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    environment:
      - node.name=elasticsearch01
      - cluster.name=vicourses-cluster
      - cluster.initial_master_nodes=elasticsearch01
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/elasticsearch01/elasticsearch01.key
      - xpack.security.http.ssl.certificate=certs/elasticsearch01/elasticsearch01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/elasticsearch01/elasticsearch01.key
      - xpack.security.transport.ssl.certificate=certs/elasticsearch01/elasticsearch01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=basic
    mem_limit: 1073741824
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  ###
  kibana:
    depends_on:
      elasticsearch01:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:8.13.4
    volumes:
      - elasticsearch_certs:/usr/share/kibana/config/certs
      - kibana_data:/usr/share/kibana/data
    ports:
      - 5601:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://elasticsearch01:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
    mem_limit: 1073741824
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  ###
  auth-service:
    image: vustrong/vicourses-authservice
    env_file:
      - services/auth_service/.env
    volumes:
      - ./services/auth_service/private.key:/app/private.key
      - ./services/auth_service/public.key:/app/public.key
      - elasticsearch_certs:/app/es-certs
    networks:
      - vicourses-network
    depends_on:
      mysql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      elasticsearch01:
        condition: service_healthy
    restart: always

  ###
  email-service:
    image: vustrong/vicourses-emailservice
    networks:
      - vicourses-network
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: always
    env_file:
      - services/email_service/.env

networks:
  vicourses-network:
    driver: bridge

volumes:
  mysqldb_data:
  elasticsearch_data01:
  elasticsearch_certs:
  kibana_data: