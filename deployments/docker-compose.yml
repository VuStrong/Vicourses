version: '2'
services:
  ###
  api-gateway:
    image: vustrong/vicourses-apigateway
    env_file:
      - services/api_gateway/.env
    volumes:
      - ./services/api_gateway/ocelot.Production.json:/app/ocelot.Production.json
    networks:
      - vicourses-network
    ports:
      - 8000:8080

  ###
  rabbitmq:
    image: rabbitmq:${RABBITMQ_VERSION}
    ports:
      - ${RABBITMQ_PORT}:5672
      - ${RABBITMQ_UI_PORT}:15672
    restart: always
    env_file:
      - rabbitmq/.env
    networks:
      - vicourses-network
    volumes:
        - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
        - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3

  ###
  mysql:
    image: mysql:${MYSQL_VERSION}
    command: ["mysqld", "--mysql-native-password=ON"]
    restart: always
    env_file:
      - db/mysql/.env
    ports:
      - "${MYSQL_PORT}:3306"
    volumes:
      - mysqldb_data:/var/lib/mysql
      - ./db/mysql/scripts:/docker-entrypoint-initdb.d
    networks:
      - vicourses-network
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
      timeout: 10s
      retries: 10

  ###
  mongodb:
    image: mongo:${MONGODB_VERSION}
    restart: always
    env_file:
      - db/mongodb/.env
    ports:
      - "${MONGODB_PORT}:27017"
    volumes:
      - mongodb_data:/data/db
      - ./db/mongodb/scripts:/docker-entrypoint-initdb.d
    networks:
      - vicourses-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      timeout: 10s
      retries: 10

  ###
  redis:
    image: redis
    restart: always
    ports:
      - "6379:6379"
    networks:
      - vicourses-network
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]

  ###
  elasticsearch-setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTIC_VERSION}
    volumes:
      - elasticsearch_certs:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: elasticsearch01\n"\
          "    dns:\n"\
          "      - elasticsearch01\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://elasticsearch01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://elasticsearch01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${ELASTIC_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    networks:
      - vicourses-network
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/elasticsearch01/elasticsearch01.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120

  ###
  elasticsearch01:
    depends_on:
      elasticsearch-setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTIC_VERSION}
    volumes:
      - elasticsearch_certs:/usr/share/elasticsearch/config/certs
      - elasticsearch_data01:/usr/share/elasticsearch/data
    ports:
      - ${ELASTIC_PORT}:9200
    environment:
      - node.name=elasticsearch01
      - cluster.name=vicourses-cluster
      - cluster.initial_master_nodes=elasticsearch01
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/elasticsearch01/elasticsearch01.key
      - xpack.security.http.ssl.certificate=certs/elasticsearch01/elasticsearch01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/elasticsearch01/elasticsearch01.key
      - xpack.security.transport.ssl.certificate=certs/elasticsearch01/elasticsearch01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=basic
    networks:
      - vicourses-network
    mem_limit: 1073741824
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  ###
  kibana:
    depends_on:
      elasticsearch01:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:${ELASTIC_VERSION}
    volumes:
      - elasticsearch_certs:/usr/share/kibana/config/certs
      - kibana_data:/usr/share/kibana/data
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://elasticsearch01:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
    networks:
      - vicourses-network
    mem_limit: 1073741824
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  ###
  filebeat:
    depends_on:
      elasticsearch01:
        condition: service_healthy
    image: docker.elastic.co/beats/filebeat:${ELASTIC_VERSION}
    networks:
      - vicourses-network
    user: root
    command: filebeat -e -strict.perms=false
    volumes:
      - elasticsearch_certs:/usr/share/filebeat/certs
      - filebeat_data:/usr/share/filebeat/data
      - services_logs_data:/var/log/services
      - ./filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml
    environment:
     - ELASTIC_USER=elastic
     - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
     - ELASTIC_HOSTS=https://elasticsearch01:9200
     - KIBANA_HOSTS=http://kibana:5601

  ###
  auth-service:
    image: vustrong/vicourses-authservice
    env_file:
      - services/auth_service/.env
    volumes:
      - ./services/auth_service/private.key:/app/private.key
      - ./services/auth_service/public.key:/app/public.key
      - services_logs_data:/app/logs
    networks:
      - vicourses-network
    depends_on:
      mysql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: always

  ###
  email-service:
    image: vustrong/vicourses-emailservice
    networks:
      - vicourses-network
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: always
    env_file:
      - services/email_service/.env

  ###
  course-service:
    image: vustrong/vicourses-courseservice
    env_file:
      - services/course_service/.env
    volumes:
      - ./services/auth_service/public.key:/app/public.key
      - services_logs_data:/app/logs
    networks:
      - vicourses-network
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: always

  ###
  search-service:
    image: vustrong/vicourses-searchservice
    env_file:
      - services/search_service/.env
    volumes:
      - services_logs_data:/app/logs
    networks:
      - vicourses-network
    depends_on:
      rabbitmq:
        condition: service_healthy
      elasticsearch01:
        condition: service_healthy
    restart: always

  ###
  storage-service:
    image: vustrong/vicourses-storageservice
    env_file:
      - services/storage_service/.env
    volumes:
      - ./services/auth_service/public.key:/app/public.key
    networks:
      - vicourses-network
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: always

  ###
  video-processing-service:
    image: vustrong/vicourses-videoprocessingservice
    env_file:
      - services/video_processing_service/.env
    networks:
      - vicourses-network
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: always

  ###
  rating-service:
    image: vustrong/vicourses-ratingservice
    env_file:
      - services/rating_service/.env
    volumes:
      - ./services/auth_service/public.key:/app/public.key
      - services_logs_data:/app/logs
    networks:
      - vicourses-network
    depends_on:
      mysql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: always

  ###
  wishlist-service:
    image: vustrong/vicourses-wishlistservice
    env_file:
      - services/wishlist_service/.env
    volumes:
      - ./services/auth_service/public.key:/app/public.key
      - services_logs_data:/app/logs
    networks:
      - vicourses-network
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: always

  ###
  discount-service:
    image: vustrong/vicourses-discountservice
    env_file:
      - services/discount_service/.env
    volumes:
      - ./services/auth_service/public.key:/app/public.key
      - services_logs_data:/app/logs
    networks:
      - vicourses-network
    depends_on:
      mysql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always

  ###
  statistics-service:
    image: vustrong/vicourses-statisticsservice
    env_file:
      - services/statistics_service/.env
    volumes:
      - ./services/auth_service/public.key:/app/public.key
      - services_logs_data:/app/logs
    networks:
      - vicourses-network
    depends_on:
      mysql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always

networks:
  vicourses-network:
    driver: bridge

volumes:
  mysqldb_data:
  mongodb_data:
  elasticsearch_data01:
  elasticsearch_certs:
  kibana_data:
  filebeat_data:
  services_logs_data: